/* BEST VIEWED IN Notepad++

	@filename 	lvl99.js
	@author		vrael&art (edited by sn0)
	@revision	3.2 - 10/01/2019

INSTRUCTIONS: 
To set your characters to use this script, create a new line in the CHARACTER config. make it say: Scripts.lvl99 = true; // 1-99 script
If you want characters to come in and just afk till the end, don't put them on a function. However, unless they're naked characters you can have them MF the run, just make sure they have enough scripts to stay in the entire time and have them leave with CharKiller
Any questions about this script or editing thereof, contact Vrael @ JSP

Use a standard chaos or baal script until your Level 99 char is high enough level not to die with this script. generally when he can use all of his gear.
CharDia can be set to do Mephisto after his script. To do that edit the delay after PrepDia to be nothing. Just move the mephisto script to AFTER this l99.js script and set a delay in the mephisto.js script. However, your character better be super godly to kill mephisto before the run ends!
CharNith needs to be set to do Andariel before he clears Nith, else he will run out of gold and start to chicken. Make sure l99.js is AFTER the andariel script!

In CharKiller's character config, set your MinGameTime to 180 and your MaxGameTime to 240-270. This will prevent r/d and shrine errors from disrupting your leveling.
Run CharKiller with D2BotLead. It's best not to run this character on a proxy, they have enough pathing delays without adding proxy delays on top of it.
All others with D2BotFollow
All characters should have Stony Field, River of Flame, Halls of Pain, and Ancients Way waypoints.
Make sure shrine character has all a1 waypoints.
Use the character names, not the profile names. */

var CharDia 	=	"Niduen";		//The character that will be setting up Diablo.
var CharDiaHlp	=	"Grunbeld";		//This is optional. If your CharDia dies too much.
var hurtDia		=	10;			//leave at this %. Do some testing to get this # down. If they kill him a few times put the number higher.

var CharNith 	=	"Seinaru";	//The character that will be setting up Nith
var hurtNith	=	15;			//leave at this %. Same with hurtDia.

var CharBaal 	=	"Majutsu";		//The character that will be setting up Baal.
var CharBaalHlp =	"Gaiseric";		//This is somewhat optional. You'll want to use this unless you just don't have the proxies to set it up right.	
var CharBaalHlp1 =	"Ganishka";		//This is completely optional. You'll get less XP. Only use this if your baal1 and baal2 can't survive.
var hurtBaal	=	10;			//leave at this %. Same as hurtDia

var CharShrine 	=	"Rakshas";	//The character that will teleport to shrine. If you want your level 99 char to miss some xp you can go without this char.

var CharKiller	=	"bowzy";	      //The character that will be getting leveled to 99.

//messages

var msgDia		=	"Diablo's Ready";	//msg when Diablo is ready
var msgNith		=	"Nith's Ready";		//msg when Nith is ready
var msgBeforeB	=	"Wait"				//msg when waves are clear
var msgBaal		=	"Come";				//msg when Baal TP is up
var msgShrineY	=	"Shrine's Ready";	//msg when CharShrine finds the shrine
var msgShrineN	=	"Skip Shrine";		//msg if CharShrine can't find shrine
var msgShrineGo	=	"Get Shrine"		//msg if there's no CharShrine

var msgSeal1	=	"Seal 1";			//msg for CharDiaHlp to help with Seal #1
var msgSeal2	=	"Seal 2";			//msg for CharDiaHlp to help with Seal #2
var msgSeal3	=	"Seal 3";			//msg for CharDiaHlp to help with Seal #2

//delay

var gameDelay	=	30000;			// this is so your game length is longer than 3 mins, it's in ms, so add 3 zeros at the end (50000 is 50 seconds)

// DO NOT EDIT BELOW HERE UNLESS YOU KNOW WHAT YOU ARE DOING! Not responsible for errors if you edit these functions.
function lvl99 () {
	switch(me.name){
		case CharDia:
			prepDia();
			break;
		
		case CharDiaHlp:
			prepDiaHelp();
			break;
			
		case CharNith:
			prepNith();
			break;
		
		case CharBaal:
		case CharBaalHlp:
			prepBaal();		
		case CharBaalHlp1:
			prepBaal();
			break;
			
		case CharShrine:
			prepShrine();
			while(true) delay(1000);
			break;
			
		case CharKiller: 
			killemAll();
			break;
			
		default:
			while (true) delay(1000);
			
			break;
	}
	
	return true;
}

Config.MaxGameTime = 220;


function prepDia() {
	this.getLayout = function (seal, value) {
		var sealPreset = getPresetUnit(108, 2, seal);

		if (!seal) {
			throw new Error("Seal preset not found");
		}

		if (sealPreset.roomy * 5 + sealPreset.y === value || sealPreset.roomx * 5 + sealPreset.x === value) {
			return 1;
		}

		return 2;
	};

	this.initLayout = function () {
		this.vizLayout = this.getLayout(396, 5275);
		this.seisLayout = this.getLayout(394, 7773);
		this.infLayout = this.getLayout(392, 7893);
	};

	this.getBoss = function (name) {
		var i, boss,
			glow = getUnit(2, 131);

		for (i = 0; i < 24; i += 1) {
			boss = getUnit(1, name);

			if (boss) {
				switch (name) {
					case getLocaleString(2851):
						if(CharDiaHlp != "") {
							Pather.makePortal(false);
							delay(50);
							say(msgSeal1);
						}
						break;
					case getLocaleString(2852):
						if(CharDiaHlp != "") {
							Pather.makePortal(false);
							delay(50);
							say(msgSeal2);
						}
						break;
					case getLocaleString(2853):
						if(CharDiaHlp != "") {
							Pather.makePortal(false);
							delay(50);
						}
						say(msgSeal3);
						break;
					default:
						break;
					
				}
				this.chaosPreattack(name, 8);

				try {
					Attack.kill(name);
					Pickit.pickItems();
				} catch (e) {
					Attack.clear(10, 0, name);
				}

				Pickit.pickItems();

				return true;
			}

			delay(250);
		}

		return !!glow;
	};

	this.chaosPreattack = function (name, amount) {
		var i, n, target, positions;

		switch (me.classid) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			target = getUnit(1, name);

			if (!target) {
				return;
			}

			positions = [[6, 11], [0, 8], [8, -1], [-9, 2], [0, -11], [8, -8]];

			for (i = 0; i < positions.length; i += 1) {
				if (Attack.validSpot(target.x + positions[i][0], target.y + positions[i][1])) { 
					Pather.moveTo(target.x + positions[i][0], target.y + positions[i][1]);
					Skill.setSkill(Config.AttackSkill[2], 0);

					for (n = 0; n < amount; n += 1) {
						Skill.cast(Config.AttackSkill[1], 1);
					}

					break;
				}
			}

			break;
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		}
	};

	this.diabloPrep = function () {
		var trapCheck,
			tick = getTickCount();

		while (getTickCount() - tick < 17500) {
			if (getTickCount() - tick >= 8000) {
				switch (me.classid) {
				case 1:
					if ([56, 59, 64].indexOf(Config.AttackSkill[1]) > -1) {
						if (me.getState(121)) {
							delay(500);
						} else {
							Skill.cast(Config.AttackSkill[1], 0, 7793, 5293);
						}

						break;
					}

					delay(500);

					break;
				case 3:
					Skill.setSkill(Config.AttackSkill[2]);
					Skill.cast(Config.AttackSkill[1], 1);

					break;
				case 5:
					if (Config.AttackSkill[1] === 245) {
						Skill.cast(Config.AttackSkill[1], 0, 7793, 5293);

						break;
					}

					delay(500);

					break;
				case 6:
					if (Config.UseTraps) {
						trapCheck = ClassAttack.checkTraps({x: 7793, y: 5293});

						if (trapCheck) {
							ClassAttack.placeTraps({x: 7793, y: 5293, classid: 243}, trapCheck);

							break;
						}
					}

					delay(500);

					break;
				default:
					delay(500);
				}
			} else {
				delay(500);
			}

			if (getUnit(1, 243)) {
				return true;
			}
		}

		throw new Error("Diablo not found");
	};

	this.openSeal = function (classid) {
		var i, j, seal;

		for (i = 0; i < 5; i += 1) {
			Pather.moveToPreset(108, 2, classid, classid === 394 ? 5 : 2, classid === 394 ? 5 : 0);

			if (i > 1) {
				Attack.clear(10);
			}

			for (j = 0; j < 3; j += 1) {
				seal = getUnit(2, classid);

				if (seal) {
					break;
				}

				delay(100);
			}

			if (!seal) {
				throw new Error("Seal not found (id " + classid + ")");
			}

			if (seal.mode) {
				return true;
			}

			sendPacket(1, 0x13, 4, 0x2, 4, seal.gid);
			delay(classid === 394 ? 1000 : 500);

			if (!seal.mode) {
				if (classid === 394 && Attack.validSpot(seal.x + 15, seal.y)) {
					Pather.moveTo(seal.x + 15, seal.y);
				} else {
					Pather.moveTo(seal.x - 5, seal.y - 5);
				}

				delay(500);
			} else {
				return true;
			}
		}

		throw new Error("Failed to open seal (id " + classid + ")");
	};

	Town.doChores();
	Pather.useWaypoint(107);
	Precast.doPrecast(true);
	this.initLayout();
	this.openSeal(395);
	this.openSeal(396);

	if (this.vizLayout === 1) {
		Pather.moveTo(7691, 5292);
	} else {
		Pather.moveTo(7695, 5316);
	}

	
	if (!this.getBoss(getLocaleString(2851))) {
		throw new Error("Failed to kill Vizier");
	}

	this.openSeal(394);

	if (this.seisLayout === 1) {
		Pather.moveTo(7771, 5196);
	} else {
		Pather.moveTo(7798, 5186);
	}
	
	if (!this.getBoss(getLocaleString(2852))) {
		throw new Error("Failed to kill de Seis");
	}

	this.openSeal(392);
	this.openSeal(393);
	
	if (CharShrine === "") say(msgShrineGo);

	if (this.infLayout === 1) {
		delay(1);
	} else {
		Pather.moveTo(7928, 5295);
	}	
	
	if (!this.getBoss(getLocaleString(2853))) {
		throw new Error("Failed to kill Infector");
	}

	Pather.moveTo(7788, 5292);
	
	this.diabloPrep();
	Pather.makePortal();
	if (me.name == CharDia) say(msgDia);
	Attack.hurt(243, hurtDia);
	Town.goToTown();
	Town.doChores();
	delay(10000);
	//while (true) delay(1000);
	return true;
}

function prepNith() {
	Town.doChores();
	Pather.useWaypoint(123);
	Precast.doPrecast(false);

	if (!Pather.moveToExit(124, true)) {
		throw new Error("Failed to go to Nihlathak");
	}

	Pather.moveToPreset(me.area, 2, 462, 0, 0, false, true);

	if (Config.Nihlathak.ViperQuit && getUnit(1, 597)) {
		print("Tomb Vipers found.");

		return true;
	}
		
	Attack.hurt(526, hurtNith);
	Pickit.pickItems();
	Town.goToTown();
	say(msgNith);
	Town.goToTown(1);	
	while (true) delay(1000);
	return true;
}

function prepBaal() {
	var portal, tick;

	this.preattack = function () {
		var check;

		switch (me.classid) {
		case 1:
			switch (Config.AttackSkill[3]) {
			case 49:
			case 53:
			case 56:
			case 59:
			case 64:
				if (me.getState(121)) {
					while (me.getState(121)) {
						delay(100);
					}
				} else {
					return Skill.cast(Config.AttackSkill[1], 0, 15094 + rand(-1, 1), 5028);
				}

				break;
			}

			break;
		case 3:
			if (Config.AttackSkill[3] === 112) {
				if (Config.AttackSkill[4] > 0) {
					Skill.setSkill(Config.AttackSkill[4], 0);
				}

				return Skill.cast(Config.AttackSkill[3], 1);
			}

			break;
		case 5:
			if (Config.AttackSkill[3] === 245) {
				return Skill.cast(Config.AttackSkill[3], 0, 15094 + rand(-1, 1), 5028);
			}

			break;
		case 6:
			if (Config.UseTraps) {
				check = ClassAttack.checkTraps({x: 15094, y: 5028});

				if (check) {
					return ClassAttack.placeTraps({x: 15094, y: 5028}, 5);
				}
			}

			if (Config.AttackSkill[3] === 256) {
				return Skill.cast(Config.AttackSkill[3], 0, 15094, 5028);
			}

			break;
		}

		return false;
	};

	this.checkThrone = function () {
		var monster = getUnit(1);

		if (monster) {
			do {
				if (Attack.checkMonster(monster) && monster.y < 5080) {
					switch (monster.classid) {
					case 23:
					case 62:
						return 1;
					case 105:
					case 381:
						return 2;
					case 557:
						return 3;
					case 558:
						return 4;
					case 571:
						return 5;
					default:
						Attack.getIntoPosition(monster, 10, 0x4);
						Attack.clear(15);

						return false;
					}
				}
			} while (monster.getNext());
		}

		return false;
	};

	this.clearThrone = function () {
		var i, monster,
			monList = [],
			pos = [15094, 5022, 15094, 5041, 15094, 5060, 15094, 5041, 15094, 5022];

		if (Config.AvoidDolls) {
			monster = getUnit(1, 691);

			if (monster) {
				do {
					if (monster.x >= 15072 && monster.x <= 15118 && monster.y >= 5002 && monster.y <= 5079 && Attack.checkMonster(monster) && Attack.skipCheck(monster)) {
						monList.push(copyUnit(monster));
					}
				} while (monster.getNext());
			}

			if (monList.length) {
				Attack.clearList(monList);
			}
		}

		for (i = 0; i < pos.length; i += 2) {
			Pather.moveTo(pos[i], pos[i + 1]);
			Attack.clear(25);
		}
	};

	this.checkHydra = function () {
		var monster = getUnit(1, "hydra");
		if (monster) {
			do {
				if (monster.mode !== 12 && monster.getStat(172) !== 2) {
					Pather.moveTo(15072, 5002);
					while (monster.mode !== 12) {
						delay(500);
						if (!copyUnit(monster).x) {
							break;
						}
					}

					break;
				}
			} while (monster.getNext());
		}

		return true;
	};

	this.announce = function () {
		var count, string, souls, dolls,
			monster = getUnit(1);

		if (monster) {
			count = 0;

			do {
				if (Attack.checkMonster(monster) && monster.y < 5094) {
					if (getDistance(me, monster) <= 40) {
						count += 1;
					}

					if (!souls && monster.classid === 641) {
						souls = true;
					}

					if (!dolls && monster.classid === 691) {
						dolls = true;
					}
				}
			} while (monster.getNext());
		}

		if (count > 30) {
			string = "DEADLY!!!" + " " + count + " monster" + (count > 1 ? "s " : " ") + "nearby.";
		} else if (count > 20) {
			string = "Lethal!" + " " + count + " monster" + (count > 1 ? "s " : " ") + "nearby.";
		} else if (count > 10) {
			string = "Dangerous!" + " " + count + " monster" + (count > 1 ? "s " : " ") + "nearby.";
		} else if (count > 0) {
			string = "Warm" + " " + count + " monster" + (count > 1 ? "s " : " ") + "nearby.";
		} else {
			string = "Cool TP. No immediate monsters.";
		}

		if (souls) {
			string += " Souls ";

			if (dolls) {
				string += "and Dolls ";
			}

			string += "in area.";
		} else if (dolls) {
			string += " Dolls in area.";
		}

		say(string);
	};
	
	delay(gameDelay)
	Town.doChores();
	Pather.useWaypoint(Config.RandomPrecast ? "random" : 129);
	Precast.doPrecast(true);

	if (me.area !== 129) {
		Pather.useWaypoint(129);
	}

	if (!Pather.moveToExit([130, 131], true)) {
		throw new Error("Failed to move to Throne of Destruction.");
	}

	Pather.moveTo(15095, 5029);

	if(me.name === CharBaal) {
	Pather.moveTo(15118, 5045);
	Pather.makePortal();
	}
	say("Hot");
	this.clearThrone();
	say("Safe");


	tick = getTickCount();
	Pather.moveTo(15094, me.classid === 3 ? 5029 : 5038);

MainLoop:
	while (true) {
		if (getDistance(me, 15094, me.classid === 3 ? 5029 : 5038) > 3) {
			Pather.moveTo(15094, me.classid === 3 ? 5029 : 5038);
		}

		if (!getUnit(1, 543)) {
			break MainLoop;
		}

		switch (this.checkThrone()) {
		case 1:
			Attack.clear(40);

			tick = getTickCount();

			Precast.doPrecast(true);

			break;
		case 2:
			Attack.clear(40);

			tick = getTickCount();

			break;
		case 4:
			Attack.clear(40);

			tick = getTickCount();

			break;
		case 3:
			Attack.clear(40);
			this.checkHydra();

			tick = getTickCount();

			break;
		case 5:
			Attack.clear(40);

			break MainLoop;
		default:
			if (getTickCount() - tick < 7e3) {
				if (me.getState(2)) {
					Skill.setSkill(109, 0);
				}

				break;
			}

			if (!this.preattack()) {
				delay(100);
			}

			break;
		}

		delay(10);
	}

	if (me.name == CharBaal) say(msgBeforeB);
	Pather.moveTo(15090, 5008);
	delay(5000);
	Precast.doPrecast(true);
	
	while (getUnit(1, 543)) {
		delay(500);
	}

	portal = getUnit(2, 563);

	if (portal) {
		Pather.usePortal(null, null, portal);
	} else {
		throw new Error("Couldn't find portal.");
	}

	if (me.name == CharBaal) {
		Pather.moveTo(15177, 5952);
		Pather.makePortal();
		delay(200);
		//say(msgBaal);
		Attack.hurt(544, 5);
		//Pickit.pickItems();
		Town.goToTown();
		say(msgBaal);
		delay(100000);
	}
	
	if (me.name == CharBaalHlp) {
		Pather.moveTo(15134, 5923);
		Attack.hurt(544, hurtBaal);
		Town.goToTown();
		delay(100000);
	}

	if (me.name == CharBaalHlp1) {
		Pather.moveTo(15134, 5923);
		Attack.hurt(544, hurtBaal);
		Town.goToTown();
		delay(100000);	
	}
	return true;

}

function prepDiaHelp() {
	this.messenger = function(name, msg) {
		if (msg === msgSeal1) {
			canKill1 = true;
			id = getLocaleString(2851);
		}
		if (msg === msgSeal2) {
			canKill2 = true;
			id = getLocaleString(2852);
		}
		if (msg === msgSeal3) {
			canKill3 = true;
			id = getLocaleString(2853);
		}
		if (msg === msgDia) {
			canKill4 = true;
			id = getLocaleString(3060);
		}
		if (msg === msgBeforeB) {
			canKill5 = true;
			id = "";
		}
	};
	var canKill1 = false, canKill2 = false, canKill3 = false, canKill4 = false, canKill5 = false;
	var id="";

	addEventListener("chatmsg", this.messenger);

	Town.doChores()
	Town.move("waypoint");
	Pather.useWaypoint(4);
	Precast.doPrecast(true);
	Pather.useWaypoint(103);
	Town.move("portalspot");
	
	while(!canKill1) delay(100);
	
	Pather.usePortal(null, CharDia);
	try { Attack.kill(id); } catch (e) { Attack.clear(10, 0, id); }
	Town.goToTown();
	
	while(!canKill2) delay(100);
	
	Pather.usePortal(null, CharDia);
	try { Attack.kill(id); } catch (e) { Attack.clear(10, 0, id); }
	Town.goToTown();
	
	while(!canKill3) delay(100);
	
	Pather.usePortal(null, CharDia);
	try { Attack.kill(id); } catch (e) { Attack.clear(10, 0, id); }
	//Town.goToTown();
	
	//while(!canKill4) delay(100);
	
	//Pather.usePortal(null, CharDia);
	//Attack.hurt(243, hurtDia);
	
	Town.goToTown(5);
	Pather.usePortal(null, CharBaal);
	while (!canKill5) {
		Pather.moveTo(15093, me.classid === 3 ? 5029 : 5039);
		Attack.clear(40);
		Precast.doPrecast();
		Pickit.pickItems();
	}
	Town.goToTown(5);
	Pickit.pickItems();
	while (true) delay(1000);
}

function prepShrine() {
	var noschrine = true, readyDia, i;
	
		this.messenger = function(name, msg) {
		if (msg === msgDia) {
			readyDia = true;	
		}
		}

	addEventListener("chatmsg", this.messenger);

	Town.doChores();
	Town.goToTown(1);
	Pather.useWaypoint(4);
	Precast.doPrecast(true);
	for (i = 4; i > 1; i -= 1) {
		if (Misc.getShrinesInArea(i, 15, me.name == CharShrine ? false : true)) {
			if (me.name == CharShrine) {
				say(msgShrineY);
				noschrine = false;
			}
			break;
		}
	}
	if (i === 1) {
		Town.goToTown();
		Pather.useWaypoint(5);
		for (i = 5; i < 36; i += 1) {
			if (Misc.getShrinesInArea(i, 15, me.name == CharShrine ? false : true)) {
				if (me.name == CharShrine) {
					say(msgShrineY);
					noschrine = false;
				}
				break;
			}
		}
	}
	if (noschrine && me.name == CharShrine){
		say(msgShrineN);
		
	}
	
	if (me.name === CharKiller) Precast.doPrecast(true);
	
	Town.goToTown();
}

function killemAll() {
	var readyDia, readyNith, readyBaal, readyWaves;
	var shrineWait = CharShrine == "" ? false : true;
	var goForShrine = false;
	var goFindShrine = false;
	var i, updated;
	
	this.messenger = function(name, msg) {
		if (msg === msgDia) {
			readyDia = true;	
		}
		if (msg === msgBeforeB) {
			readyWaves = true;	
		}
		if (msg === msgBaal) {
			readyBaal = true;	
		}
		if (msg === msgShrineY) {
			shrineWait = false;	
			goForShrine = true;
		}
		if (msg === msgShrineN) {
			shrineWait = false;
		}
		if (msg === msgShrineGo) {
			goFindShrine = true;
		}
		if (msg === msgNith) {
			readyNith = true;	
		}			
	};

	addEventListener("chatmsg", this.messenger);

	/*this.longRangeSupport = function () {
		var monster, monList, index;

		switch (me.classid) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			ClassAttack.raiseArmy(50);

			if (Config.Curse[1] > 0) {
				monster = getUnit(1);

				if (monster) {
					do {
						if (Attack.checkMonster(monster) && getDistance(me, monster) < 50 && !checkCollision(me, monster, 0x4) &&
								ClassAttack.isCursable(monster) && !(monster.spectype & 0x7) && !monster.getState(ClassAttack.curseState[1])) {
							Skill.cast(Config.Curse[1], 0, monster);
						}
					} while (monster.getNext());
				}
			}

			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		case 6: // assasin
			if (Config.UseTraps && ClassAttack.checkTraps({x: 15095, y: 5037})) {
				ClassAttack.placeTraps({x: 15095, y: 5037}, 5);
			}
			break;
		}

		if ([24, 49, 51, 56, 59, 84, 93, 140, 244].indexOf(Config.AttackSkill[1]) === -1 &&
				[24, 49, 51, 56, 59, 84, 93, 140, 244].indexOf(Config.AttackSkill[3]) === -1) {
			return false;
		}

		monster = getUnit(1);
		monList = [];

		if (monster) {
			do {
				if (Attack.checkMonster(monster) && getDistance(me, monster) < 50 && !checkCollision(me, monster, 0x4)) {
					monList.push(copyUnit(monster));
				}
			} while (monster.getNext());
		}

		while (monList.length) {
			monList.sort(Sort.units);

			monster = copyUnit(monList[0]);

			if (monster && Attack.checkMonster(monster)) {
				index = monster.spectype & 0x7 ? 1 : 3;

				if (Attack.checkResist(monster, Attack.getSkillElement(Config.AttackSkill[index]))) {
					if (Config.AttackSkill[index] > -1) {
						ClassAttack.doCast(monster, Config.AttackSkill[index], Config.AttackSkill[index + 1]);
					}
				} else {
					monList.shift();
				}
			} else {
				monList.shift();
			}

			delay(5);
		}

		return true;
	};*/

		Town.doChores();
		Town.move("waypoint");
		Pather.useWaypoint(4);
		Precast.doPrecast(true);
		Pather.useWaypoint(109);
		Town.doChores;
	
		
        //Dia part
		while(!Pather.usePortal(131, CharBaal)); { 
			delay(100);
		}
		Pather.moveTo(15117, 5044);
		Attack.securePosition(me.x, me.y, 10, 10);
		//Attack.weaponSwitch(2); //go to back side while waiting for readydia command
		
        while (!readyDia)
		delay(100);
        readyDia = false;
       
        if(CharShrine === "") {
                while (!goFindShrine) delay(100);
                prepShrine();  
        }
       
        while(shrineWait) delay(100);
       
        if (goForShrine) {
				//Attack.weaponSwitch(1);		//go to front side before pathing to diablo to kill
				Pather.usePortal(109, CharBaal);
				Town.move("waypoint");
                Pather.useWaypoint(1);  
				Town.move("portalspot");
                Pather.usePortal(null, CharShrine);
                delay(100);
                Misc.getShrinesInArea(me.area, 15, true);
                Pather.usePortal(null, CharShrine);
                Town.move("waypoint");
                Pather.useWaypoint(103);
        }
       
        while(!Pather.usePortal(108, CharDia)) {
                delay(100);
        }
       
        try {
                Attack.kill(243);
				Pickit.pickItems();
        }
        catch (e) {
                say(e);
        }
        finally {
                Town.goToTown(5);  
                Town.move("portalspot");
        }
		
 	//Baal part
	if(!Pather.usePortal(131, CharBaal)) {
		delay(300);
	}
	
	if (me.area == 131) Pather.moveTo(15117, 5044);
	Precast.doPrecast(); 
	//Attack.weaponSwitch(2);		//swap to back side when you get back to throne
	
	while (!readyWaves) {		 
		delay(2e3);
	}
	
	/*while (!readyWaves && me.area === 131 && Config.lvl99.LongRangeSupport) {
		this.longRangeSupport();
		delay(2e3);
	}*/
	
	if (readyWaves) {
		Town.goToTown();
		Pather.usePortal(124, CharNith);
	}
	while(!Pather.usePortal(124, CharNith)) {
		delay(100);
	}
	
	try {
		//Attack.weaponSwitch(1); - command doesn't work for some reason.
		Attack.kill(526); 
		Pickit.pickItems();
	}
	catch (e) {
		say(e);
	}
	finally {
		Town.goToTown();
	}
	while (!readyBaal) delay(1e3);
	while(!Pather.usePortal(132, CharBaal)) {
		delay(100);
	}
	
		var baal;
						
		baal = getUnit(1, 544);
		Attack.kill(544); 
		Pickit.pickItems();
		/*while (baal) {
			delay(2e3);
			if (baal && (baal.mode === 0 || baal.mode === 12)) {
				delay(1e3);
				Town.goToTown();
				//Attack.weaponSwitch(swap);	//swap to front side once you get to town after baal is dead - comment in for barb			
				break;
			}  
		}*/
		delay(1e3);
		scriptBroadcast("quit");
}	
	
